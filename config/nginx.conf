#user  nobody;
worker_processes    1;
error_log           logs/rtmp_error.log debug;
pid                 logs/nginx.pid;

events {
    worker_connections  512;
}

http {
    server {
        listen 8080;

        location /hls {
            # Serve HLS fragments

            # CORS setup
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Expose-Headers' 'Content-Length';

            # allow CORS preflight requests
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Max-Age' 1728000; #20days
                add_header 'Content-Type' 'text/plain charset=UTF-8';
                add_header 'Content-Length' 0;
                return 204;
            }

            types {
                application/vnd.apple.mpegurl m3u8;
                video/mp2t ts;
            }

            root /tmp;
            add_header Cache-Control no-cache;
        }     
    }
}

rtmp {
    server {
        listen 1935;

        application stream {
           live on;

	    exec ffmpeg -i rtmp://localhost:1935/stream/$name -async 1 -vsync -1
              -c:a libfdk_aac -b:a 32k  -c:v libx264 -b:v 128K -f flv rtmp://localhost:1935/hls/$name_low
              -c:a libfdk_aac -b:a 64k  -c:v libx264 -b:v 256k -f flv rtmp://localhost:1935/hls/$name_mid
              -c:a libfdk_aac -b:a 128k -c:v libx264 -b:v 512K -f flv rtmp://localhost:1935/hls/$name_hi;
	      #2>>/tmp;
	}

	application hls {
	    live on;
            hls on;
            hls_path /tmp/hls;
            hls_fragment 2s;
            hls_playlist_length 6s;

#When stream is started nginx-rtmp parses the playlist and finds the last sequence number. 
#Streaming is started from that sequence number.
            hls_continuous on;
	    hls_variant _low BANDWIDTH=80000;
            hls_variant _mid BANDWIDTH=120000;
            hls_variant _hi  BANDWIDTH=160000;
        }
    }
}
